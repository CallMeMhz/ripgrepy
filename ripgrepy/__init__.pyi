from _typeshed import Incomplete
from typing import Any

class RipGrepNotFound(Exception): ...

class RipGrepOut:
    command: Incomplete
    def __init__(self, _output: Any, command: list[str]) -> None: ...
    @property
    def as_dict(self) -> list: ...
    @property
    def as_json(self) -> str: ...
    @property
    def as_string(self) -> str: ...

class Ripgrepy:
    regex_pattern: Incomplete
    path: Incomplete
    command: Incomplete
    b: Incomplete
    s: Incomplete
    E: Incomplete
    f: Incomplete
    l: Incomplete
    F: Incomplete
    L: Incomplete
    g: Incomplete
    i: Incomplete
    v: Incomplete
    n: Incomplete
    A: Incomplete
    B: Incomplete
    C: Incomplete
    x: Incomplete
    M: Incomplete
    m: Incomplete
    U: Incomplete
    I: Incomplete
    N: Incomplete
    o: Incomplete
    P: Incomplete
    p: Incomplete
    q: Incomplete
    e: Incomplete
    r: Incomplete
    z: Incomplete
    S: Incomplete
    a: Incomplete
    j: Incomplete
    T: Incomplete
    u: Incomplete
    H: Incomplete
    w: Incomplete
    run_rg: Incomplete
    def __init__(self, regex_pattern: str, path: str, rg_path: str = 'rg') -> None: ...
    def run(self, universal_newlines=True) -> RipGrepOut: ...
    def after_context(self, number: int) -> Ripgrepy: ...
    def before_context(self, number: int) -> Ripgrepy: ...
    def context(self, number: int) -> Ripgrepy: ...
    def binary(self) -> Ripgrepy: ...
    def auto_hybrid_regex(self) -> Ripgrepy: ...
    def block_buffered(self) -> Ripgrepy: ...
    def byte_offset(self) -> Ripgrepy: ...
    def case_sensitive(self) -> Ripgrepy: ...
    def count_matches(self) -> Ripgrepy: ...
    def crlf(self) -> Ripgrepy: ...
    def debug(self) -> Ripgrepy: ...
    def dfa_size_limit(self, num_suffix: int) -> Ripgrepy: ...
    def encoding(self, encoding: str) -> Ripgrepy: ...
    def file(self, pattern: str) -> Ripgrepy: ...
    def files(self) -> Ripgrepy: ...
    def files_with_matches(self) -> Ripgrepy: ...
    def files_without_match(self) -> Ripgrepy: ...
    def fixed_strings(self) -> Ripgrepy: ...
    def follow(self) -> Ripgrepy: ...
    def glob(self, glob_pattern: str) -> Ripgrepy: ...
    def hidden(self) -> Ripgrepy: ...
    def iglob(self, glob_pattern: str) -> Ripgrepy: ...
    def ignore_case(self) -> Ripgrepy: ...
    def ignore_file(self, path: str) -> Ripgrepy: ...
    def ignore_file_case_insensitive(self) -> Ripgrepy: ...
    def invert_match(self) -> Ripgrepy: ...
    def json(self) -> Ripgrepy: ...
    def line_buffered(self) -> Ripgrepy: ...
    def line_number(self) -> Ripgrepy: ...
    def line_regexp(self) -> Ripgrepy: ...
    def max_columns(self, num: int) -> Ripgrepy: ...
    def max_columns_preview(self) -> Ripgrepy: ...
    def max_count(self, num: int) -> Ripgrepy: ...
    def max_depth(self, num: int) -> Ripgrepy: ...
    def max_filesize(self, num_suffix: str) -> Ripgrepy: ...
    def mmap(self) -> Ripgrepy: ...
    def multiline(self) -> Ripgrepy: ...
    def multiline_dotall(self) -> Ripgrepy: ...
    def no_config(self) -> Ripgrepy: ...
    def no_filename(self) -> Ripgrepy: ...
    def no_heading(self) -> Ripgrepy: ...
    def no_ignore(self) -> Ripgrepy: ...
    def no_ignore_dot(self) -> Ripgrepy: ...
    def no_ignore_global(self) -> Ripgrepy: ...
    def no_ignore_messages(self) -> Ripgrepy: ...
    def no_ignore_parent(self) -> Ripgrepy: ...
    def no_ignore_vcs(self) -> Ripgrepy: ...
    def no_line_number(self) -> Ripgrepy: ...
    def no_messages(self) -> Ripgrepy: ...
    def no_mmap(self) -> Ripgrepy: ...
    def no_pcre2_unicode(self) -> Ripgrepy: ...
    def null(self) -> Ripgrepy: ...
    def null_data(self) -> Ripgrepy: ...
    def one_file_system(self) -> Ripgrepy: ...
    def only_matching(self) -> Ripgrepy: ...
    def passthru(self) -> Ripgrepy: ...
    def path_seprator(self, separator: str) -> Ripgrepy: ...
    def path_separator(self, separator: str) -> Ripgrepy: ...
    def pcre2(self) -> Ripgrepy: ...
    def pcre2_version(self) -> Ripgrepy: ...
    def pre(self, command: str) -> Ripgrepy: ...
    def pre_glob(self, glob: str) -> Ripgrepy: ...
    def pretty(self) -> Ripgrepy: ...
    def quiet(self) -> Ripgrepy: ...
    def regex_size_limit(self, num_suffix: str) -> Ripgrepy: ...
    def regexp(self, pattern: str) -> Ripgrepy: ...
    def replace(self, replacement_text: str) -> Ripgrepy: ...
    def search_zip(self) -> Ripgrepy: ...
    def smart_case(self) -> Ripgrepy: ...
    def sort(self, sort_by: str) -> Ripgrepy: ...
    def sortr(self, sort_by: str) -> Ripgrepy: ...
    def stats(self) -> Ripgrepy: ...
    def text(self) -> Ripgrepy: ...
    def threads(self, num: int) -> Ripgrepy: ...
    def trim(self) -> Ripgrepy: ...
    def type_(self, type_pattern: str) -> Ripgrepy: ...
    def type_add(self, type_spec: str) -> Ripgrepy: ...
    def type_clear(self) -> Ripgrepy: ...
    def type_list(self) -> Ripgrepy: ...
    def type_not(self, type_pattern: str) -> Ripgrepy: ...
    def unrestricted(self) -> Ripgrepy: ...
    def vimgrep(self) -> Ripgrepy: ...
    def with_filename(self) -> Ripgrepy: ...
    def word_regexp(self) -> Ripgrepy: ...
    def no_unicode(self) -> Ripgrepy: ...
    def engine(self, engine: str) -> Ripgrepy: ...
